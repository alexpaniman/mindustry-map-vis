* Mindustry map visualizer
This tool takes .msav save files generated by Mindustry over HTTP and produces an image of the map
that it represents.

This tool can be used to generate previews of games, create on-the-fly status images, or even
GIFs of games as they are played. Note that there is no embedded way to do this --- you will need to
generate multiple images and assemble a GIF yourself.

You can use the tool locally, but I recommend launching it inside a Docker container. It uses
MESA LLVMpipe for OpenGL rendering so that it doesn't require a GPU and can run headless on a
CPU-only server.

The only supported way to build this is using [[https://github.com/NixOS/nix][Nix]]. If you don't have Nix already, check out
https://github.com/DeterminateSystems/nix-installer.

#+begin_src sh
# Will automatically build Mindustry with patches applied.
# The resulting container will be symlinked in the current directory as 'result'.
nix build github:alexpaniman/mindustry-map-vis#docker

# This will load the generated container and launch it in a single line.
# "docker run" will block; you can stop it with Ctrl+C.
# Alternatively, you can run "docker run" with the "-d" flag to detach execution.
docker load < result | awk '/Loaded image:/ { print $3 }' | xargs -I {} docker run -p 8080:8080 {}
#+end_src

It will start on port =8080=, and you can interact with it via an HTTP request:
#+begin_src
POST {base_url}/screenshot
#+end_src

- ={base_url}= --- base URL of the server (defaults to http://0.0.0.0:8080).

*Request Body:*
- =file= --- the .msav file for which the screenshot will be generated.

*Response:*
- =200 OK= --- returns the generated screenshot image (=Content-Type: image/png=).
- =400 Bad Request= --- if no file is provided or the file type is unsupported.

Assuming you have a .msav file of one of the default maps in the current directory, e.g.,
=Shattered.msav=:
#+begin_src sh
curl -X POST --data-binary @./Shattered.msav http://0.0.0.0:8080/screenshot -o screenshot.png
#+end_src

The server queues your requests and processes them in order. After processing, the screenshot will
be saved as =screenshot.png=:

[[file:imgs/screenshot.png]]
